// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_datanode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNSquidGameClient is the client API for DNSquidGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSquidGameClient interface {
	DNSendPlaysG1(ctx context.Context, in *DNPlayG1, opts ...grpc.CallOption) (*DNConfirmation, error)
	DNSendPlayG2(ctx context.Context, in *DNPlayG2, opts ...grpc.CallOption) (*DNConfirmation, error)
	DNReceivePlaysG1(ctx context.Context, in *DNPlayer, opts ...grpc.CallOption) (*DNPlayG1, error)
}

type dNSquidGameClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSquidGameClient(cc grpc.ClientConnInterface) DNSquidGameClient {
	return &dNSquidGameClient{cc}
}

func (c *dNSquidGameClient) DNSendPlaysG1(ctx context.Context, in *DNPlayG1, opts ...grpc.CallOption) (*DNConfirmation, error) {
	out := new(DNConfirmation)
	err := c.cc.Invoke(ctx, "/DNSquidGame/DNSendPlaysG1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSquidGameClient) DNSendPlayG2(ctx context.Context, in *DNPlayG2, opts ...grpc.CallOption) (*DNConfirmation, error) {
	out := new(DNConfirmation)
	err := c.cc.Invoke(ctx, "/DNSquidGame/DNSendPlayG2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSquidGameClient) DNReceivePlaysG1(ctx context.Context, in *DNPlayer, opts ...grpc.CallOption) (*DNPlayG1, error) {
	out := new(DNPlayG1)
	err := c.cc.Invoke(ctx, "/DNSquidGame/DNReceivePlaysG1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSquidGameServer is the server API for DNSquidGame service.
// All implementations must embed UnimplementedDNSquidGameServer
// for forward compatibility
type DNSquidGameServer interface {
	DNSendPlaysG1(context.Context, *DNPlayG1) (*DNConfirmation, error)
	DNSendPlayG2(context.Context, *DNPlayG2) (*DNConfirmation, error)
	DNReceivePlaysG1(context.Context, *DNPlayer) (*DNPlayG1, error)
	mustEmbedUnimplementedDNSquidGameServer()
}

// UnimplementedDNSquidGameServer must be embedded to have forward compatible implementations.
type UnimplementedDNSquidGameServer struct {
}

func (UnimplementedDNSquidGameServer) DNSendPlaysG1(context.Context, *DNPlayG1) (*DNConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSendPlaysG1 not implemented")
}
func (UnimplementedDNSquidGameServer) DNSendPlayG2(context.Context, *DNPlayG2) (*DNConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSendPlayG2 not implemented")
}
func (UnimplementedDNSquidGameServer) DNReceivePlaysG1(context.Context, *DNPlayer) (*DNPlayG1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNReceivePlaysG1 not implemented")
}
func (UnimplementedDNSquidGameServer) mustEmbedUnimplementedDNSquidGameServer() {}

// UnsafeDNSquidGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSquidGameServer will
// result in compilation errors.
type UnsafeDNSquidGameServer interface {
	mustEmbedUnimplementedDNSquidGameServer()
}

func RegisterDNSquidGameServer(s grpc.ServiceRegistrar, srv DNSquidGameServer) {
	s.RegisterService(&DNSquidGame_ServiceDesc, srv)
}

func _DNSquidGame_DNSendPlaysG1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNPlayG1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSquidGameServer).DNSendPlaysG1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNSquidGame/DNSendPlaysG1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSquidGameServer).DNSendPlaysG1(ctx, req.(*DNPlayG1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSquidGame_DNSendPlayG2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNPlayG2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSquidGameServer).DNSendPlayG2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNSquidGame/DNSendPlayG2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSquidGameServer).DNSendPlayG2(ctx, req.(*DNPlayG2))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSquidGame_DNReceivePlaysG1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNPlayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSquidGameServer).DNReceivePlaysG1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNSquidGame/DNReceivePlaysG1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSquidGameServer).DNReceivePlaysG1(ctx, req.(*DNPlayer))
	}
	return interceptor(ctx, in, info, handler)
}

// DNSquidGame_ServiceDesc is the grpc.ServiceDesc for DNSquidGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNSquidGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DNSquidGame",
	HandlerType: (*DNSquidGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DNSendPlaysG1",
			Handler:    _DNSquidGame_DNSendPlaysG1_Handler,
		},
		{
			MethodName: "DNSendPlayG2",
			Handler:    _DNSquidGame_DNSendPlayG2_Handler,
		},
		{
			MethodName: "DNReceivePlaysG1",
			Handler:    _DNSquidGame_DNReceivePlaysG1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataNode.proto",
}
