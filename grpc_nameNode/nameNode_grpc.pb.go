// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_namenode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NNSquidGameClient is the client API for NNSquidGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NNSquidGameClient interface {
	NNSendPlaysG1(ctx context.Context, in *NNPlayG1, opts ...grpc.CallOption) (*NNConfirmation, error)
	NNSendPlaysG2(ctx context.Context, in *NNPlayG2, opts ...grpc.CallOption) (*NNConfirmation, error)
	NNReceivePlaysG1(ctx context.Context, in *NNPlayer, opts ...grpc.CallOption) (*NNPlayG1, error)
}

type nNSquidGameClient struct {
	cc grpc.ClientConnInterface
}

func NewNNSquidGameClient(cc grpc.ClientConnInterface) NNSquidGameClient {
	return &nNSquidGameClient{cc}
}

func (c *nNSquidGameClient) NNSendPlaysG1(ctx context.Context, in *NNPlayG1, opts ...grpc.CallOption) (*NNConfirmation, error) {
	out := new(NNConfirmation)
	err := c.cc.Invoke(ctx, "/NNSquidGame/NNSendPlaysG1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nNSquidGameClient) NNSendPlaysG2(ctx context.Context, in *NNPlayG2, opts ...grpc.CallOption) (*NNConfirmation, error) {
	out := new(NNConfirmation)
	err := c.cc.Invoke(ctx, "/NNSquidGame/NNSendPlaysG2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nNSquidGameClient) NNReceivePlaysG1(ctx context.Context, in *NNPlayer, opts ...grpc.CallOption) (*NNPlayG1, error) {
	out := new(NNPlayG1)
	err := c.cc.Invoke(ctx, "/NNSquidGame/NNReceivePlaysG1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NNSquidGameServer is the server API for NNSquidGame service.
// All implementations must embed UnimplementedNNSquidGameServer
// for forward compatibility
type NNSquidGameServer interface {
	NNSendPlaysG1(context.Context, *NNPlayG1) (*NNConfirmation, error)
	NNSendPlaysG2(context.Context, *NNPlayG2) (*NNConfirmation, error)
	NNReceivePlaysG1(context.Context, *NNPlayer) (*NNPlayG1, error)
	mustEmbedUnimplementedNNSquidGameServer()
}

// UnimplementedNNSquidGameServer must be embedded to have forward compatible implementations.
type UnimplementedNNSquidGameServer struct {
}

func (UnimplementedNNSquidGameServer) NNSendPlaysG1(context.Context, *NNPlayG1) (*NNConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NNSendPlaysG1 not implemented")
}
func (UnimplementedNNSquidGameServer) NNSendPlaysG2(context.Context, *NNPlayG2) (*NNConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NNSendPlaysG2 not implemented")
}
func (UnimplementedNNSquidGameServer) NNReceivePlaysG1(context.Context, *NNPlayer) (*NNPlayG1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NNReceivePlaysG1 not implemented")
}
func (UnimplementedNNSquidGameServer) mustEmbedUnimplementedNNSquidGameServer() {}

// UnsafeNNSquidGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NNSquidGameServer will
// result in compilation errors.
type UnsafeNNSquidGameServer interface {
	mustEmbedUnimplementedNNSquidGameServer()
}

func RegisterNNSquidGameServer(s grpc.ServiceRegistrar, srv NNSquidGameServer) {
	s.RegisterService(&NNSquidGame_ServiceDesc, srv)
}

func _NNSquidGame_NNSendPlaysG1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NNPlayG1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NNSquidGameServer).NNSendPlaysG1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NNSquidGame/NNSendPlaysG1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NNSquidGameServer).NNSendPlaysG1(ctx, req.(*NNPlayG1))
	}
	return interceptor(ctx, in, info, handler)
}

func _NNSquidGame_NNSendPlaysG2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NNPlayG2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NNSquidGameServer).NNSendPlaysG2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NNSquidGame/NNSendPlaysG2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NNSquidGameServer).NNSendPlaysG2(ctx, req.(*NNPlayG2))
	}
	return interceptor(ctx, in, info, handler)
}

func _NNSquidGame_NNReceivePlaysG1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NNPlayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NNSquidGameServer).NNReceivePlaysG1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NNSquidGame/NNReceivePlaysG1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NNSquidGameServer).NNReceivePlaysG1(ctx, req.(*NNPlayer))
	}
	return interceptor(ctx, in, info, handler)
}

// NNSquidGame_ServiceDesc is the grpc.ServiceDesc for NNSquidGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NNSquidGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NNSquidGame",
	HandlerType: (*NNSquidGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NNSendPlaysG1",
			Handler:    _NNSquidGame_NNSendPlaysG1_Handler,
		},
		{
			MethodName: "NNSendPlaysG2",
			Handler:    _NNSquidGame_NNSendPlaysG2_Handler,
		},
		{
			MethodName: "NNReceivePlaysG1",
			Handler:    _NNSquidGame_NNReceivePlaysG1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nameNode.proto",
}
