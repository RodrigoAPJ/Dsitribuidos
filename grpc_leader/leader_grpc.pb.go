// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_leader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquidGameClient is the client API for SquidGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquidGameClient interface {
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	SendPlaysG1(ctx context.Context, in *PlayG1, opts ...grpc.CallOption) (*State, error)
	SendPlayG2(ctx context.Context, in *PlayG2, opts ...grpc.CallOption) (*State, error)
	GetTeamG2(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*TeamInfo, error)
	GetResultsG2(ctx context.Context, in *TeamInfo, opts ...grpc.CallOption) (*State, error)
}

type squidGameClient struct {
	cc grpc.ClientConnInterface
}

func NewSquidGameClient(cc grpc.ClientConnInterface) SquidGameClient {
	return &squidGameClient{cc}
}

func (c *squidGameClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/SquidGame/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameClient) SendPlaysG1(ctx context.Context, in *PlayG1, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/SquidGame/SendPlaysG1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameClient) SendPlayG2(ctx context.Context, in *PlayG2, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/SquidGame/SendPlayG2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameClient) GetTeamG2(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*TeamInfo, error) {
	out := new(TeamInfo)
	err := c.cc.Invoke(ctx, "/SquidGame/GetTeamG2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squidGameClient) GetResultsG2(ctx context.Context, in *TeamInfo, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/SquidGame/GetResultsG2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquidGameServer is the server API for SquidGame service.
// All implementations must embed UnimplementedSquidGameServer
// for forward compatibility
type SquidGameServer interface {
	JoinGame(context.Context, *JoinRequest) (*JoinReply, error)
	SendPlaysG1(context.Context, *PlayG1) (*State, error)
	SendPlayG2(context.Context, *PlayG2) (*State, error)
	GetTeamG2(context.Context, *PlayerInfo) (*TeamInfo, error)
	GetResultsG2(context.Context, *TeamInfo) (*State, error)
	mustEmbedUnimplementedSquidGameServer()
}

// UnimplementedSquidGameServer must be embedded to have forward compatible implementations.
type UnimplementedSquidGameServer struct {
}

func (UnimplementedSquidGameServer) JoinGame(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedSquidGameServer) SendPlaysG1(context.Context, *PlayG1) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlaysG1 not implemented")
}
func (UnimplementedSquidGameServer) SendPlayG2(context.Context, *PlayG2) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayG2 not implemented")
}
func (UnimplementedSquidGameServer) GetTeamG2(context.Context, *PlayerInfo) (*TeamInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamG2 not implemented")
}
func (UnimplementedSquidGameServer) GetResultsG2(context.Context, *TeamInfo) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultsG2 not implemented")
}
func (UnimplementedSquidGameServer) mustEmbedUnimplementedSquidGameServer() {}

// UnsafeSquidGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquidGameServer will
// result in compilation errors.
type UnsafeSquidGameServer interface {
	mustEmbedUnimplementedSquidGameServer()
}

func RegisterSquidGameServer(s grpc.ServiceRegistrar, srv SquidGameServer) {
	s.RegisterService(&SquidGame_ServiceDesc, srv)
}

func _SquidGame_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGame/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGame_SendPlaysG1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayG1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServer).SendPlaysG1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGame/SendPlaysG1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServer).SendPlaysG1(ctx, req.(*PlayG1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGame_SendPlayG2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayG2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServer).SendPlayG2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGame/SendPlayG2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServer).SendPlayG2(ctx, req.(*PlayG2))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGame_GetTeamG2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServer).GetTeamG2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGame/GetTeamG2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServer).GetTeamG2(ctx, req.(*PlayerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquidGame_GetResultsG2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServer).GetResultsG2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGame/GetResultsG2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServer).GetResultsG2(ctx, req.(*TeamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// SquidGame_ServiceDesc is the grpc.ServiceDesc for SquidGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquidGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SquidGame",
	HandlerType: (*SquidGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _SquidGame_JoinGame_Handler,
		},
		{
			MethodName: "SendPlaysG1",
			Handler:    _SquidGame_SendPlaysG1_Handler,
		},
		{
			MethodName: "SendPlayG2",
			Handler:    _SquidGame_SendPlayG2_Handler,
		},
		{
			MethodName: "GetTeamG2",
			Handler:    _SquidGame_GetTeamG2_Handler,
		},
		{
			MethodName: "GetResultsG2",
			Handler:    _SquidGame_GetResultsG2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leader.proto",
}
